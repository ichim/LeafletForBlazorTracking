@page "/"
@using Simulator.data;
<h2>The movement of points on the map is simulated</h2>
<h6>  1. click on upload data button</h6>
<h6>  2. click on move points button</h6>
<button @onclick="upload">1. upload data</button>
<button @onclick="move">2. move points</button>
<RealTimeMap @ref="realTimeMap" height="620px" width="820px"></RealTimeMap>
@code {
    RealTimeMap? realTimeMap;

    public async Task upload()
    {
        if (realTimeMap == null)
            return;

        defaultAppearace(); //default points appearance

        realTimeMap.Geometric.Points.changeExtentWhenMovingPoints = true; //moving the points on the map will change the current view of the map

        if (realTimeMap != null)
        {
            await realTimeMap.Geometric.Points.upload(new InputData().input);

            #region Configuring Nearby Points Tracking analysis
            //we will only follow some of the vehicles: less the ambulance
            var analysis = realTimeMap.Geometric.Points.Analysis(item =>
                item.type == "suspicious vehicle" ||
                item.type == "intervention crew" ||
                item.type == "police crew");
            //or expression:
            // var analysis = realTimeMap.Geometric.Points.Analysis(item =>
            //     item.type != "ambulance");
            analysis.nearby = new RealTimeMap.NearbyAnalysis()
                {
                    threshold = 35,
                    unit = RealTimeMap.UnitOfMeasure.meters
                };
            analysis.OnNearbyThresholdFired += onNearbyThresholdTrigger;
            analysis.OnNearbyThresholdClosed += nearbyThresholdTriggerClosed;
            #endregion
        }

    }


    public  void defaultAppearace()
    { //default appearance of tracking points
        if (realTimeMap != null)
        {
            realTimeMap.Geometric.Points.Appearance(item => item.type == "intervention crew", true).pattern = new RealTimeMap.PointSymbol()
                {
                    color = " #002e61",
                    fillColor = "#00428c",
                    fillOpacity = 0.8,
                    weight = 2,
                    opacity = 1,
                    radius = 8
                };
            realTimeMap.Geometric.Points.Appearance(item => item.type == "suspicious vehicle").pattern = new RealTimeMap.PointSymbol()
                {
                    color = "#8f1204",
                    fillColor = "#f6322b",
                    fillOpacity = 0.5,
                    weight = 2,
                    opacity = 1,
                    radius = 8
                };
            realTimeMap.Geometric.Points.Appearance(item => item.type == "ambulance").pattern = new RealTimeMap.PointSymbol()
                {
                    color = "red",
                    fillColor = "white",
                    fillOpacity = 0.5,
                    weight = 4,
                    opacity = 1,
                    radius = 8
                };
            realTimeMap.Geometric.Points.Appearance(item => item.type == "police crew").pattern = new RealTimeMap.PointSymbol()
                {
                    color = " #028ee8",
                    fillColor = " #8fc2fa",
                    fillOpacity = 0.5,
                    weight = 2,
                    opacity = 1,
                    radius = 8
                };
        }
    }

    public void nearbyThresholdTriggerClosed(object sender)
    {
        if (realTimeMap == null)
            return;
        Task.Run(async () =>
        {
            await realTimeMap.Geometric.DisplayPointsFromArray.deleteAll();
        });
        defaultAppearace(); //default appearance
        Task.Run(async () =>
        {//we delete the measurement lines
            await realTimeMap.Geometric.DisplayPolylinesFromArray.deleteMeasure();
        });

    }
    int pas = 0;
    public async void onNearbyThresholdTrigger(object sender, RealTimeMap.NearbyThresholdArgs args)
    {

        defaultAppearace();
        if (realTimeMap == null)
            return;
        await realTimeMap.Geometric.DisplayPolylinesFromArray.deleteMeasure();
        await realTimeMap.Geometric.DisplayPointsFromArray.deleteAll();
        if (args.tuples == null)
            return;
        foreach (var item in args.tuples)
        {
            if (item.tuple == null)
                return;
            //we highlight the points that are close (to each other)
            await realTimeMap.Geometric.DisplayPointsFromArray.add(new double[2] { item.tuple.Item1.latitude, item.tuple.Item1.longitude }, new RealTimeMap.PointSymbol()
                {
                    color = "yellow",
                    fillColor = "yellow",
                    opacity = 0.8,
                    fillOpacity = 0,
                    radius = 12,
                    weight = 2

                });
            //we add a measuring line with the distance
            await realTimeMap.Geometric.DisplayPolylinesFromArray.addMeasure(new RealTimeMap.MeasureLine()
                {
                    start = new double[2] { item.tuple.Item1.latitude, item.tuple.Item1.longitude },
                    end = new double[2] { item.tuple.Item2.latitude, item.tuple.Item2.longitude },
                    text = $"{Math.Round(item.distance, 1).ToString()} m",
                    textAnchor = new double[2] { -2, 8 },
                    labelStyle = "min-width:40px;height:100%;background-color:#084886;border-radius:6px;color:#d2efff;text-align:center;font-size:10px;"

                });

        }
        pas++;
    }
    public async Task move()
    {//points movement simulator: data simulator/data.cs
        for (int i = 0; i < new InputData().move1.Count(); i++)
        {
            var pct1 = new InputData().move1[i];
            var pct3 = new InputData().move3[i];
            var pct4 = new InputData().move4[i];
            var pct6 = new InputData().move6[i];
            if (realTimeMap != null)
            {
                await realTimeMap.Geometric.Points.moveTo((new List<RealTimeMap.StreamPoint>() { pct1, pct3, pct4, pct6 }).ToArray());
            }
            var timeDelay = 600;
            if (i > 2 && i < 8)
                timeDelay = 3000;

            await Task.Delay(timeDelay);

            if (i == new InputData().move1.Count() - 1)
                i = 0;
        }
    }
}